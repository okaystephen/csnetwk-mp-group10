//Generated by GuiGenie - Copyright (c) 2004 Mario Awad.
//Home Page http://guigenie.cjb.net - Check often for new versions!

import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.text.*;
import javax.swing.event.*;
import javax.swing.text.html.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

public class ClientGUI extends Thread {
    private JFrame frame;
    private JPanel panel;

    private JButton client_logout_button;
    private JTextPane client_active;
    private JLabel client_active_label;
    private JTextPane client_chatlog;
    private JTextField client_name_field;
    private JLabel client_name_label;
    private JTextField client_ip_field;
    private JLabel client_ip_label;
    private JTextField client_port_field;
    private JLabel client_port_label;
    private JButton client_proceed_button;
    private JScrollPane vertical_log;
    private JScrollPane vertical_user;
    private JScrollPane vertical_message;

    private JButton client_file_button;
    private JButton client_message_button;
    private JTextArea client_message_field;

    // For server connection
    private String username;
    private String server;
    private String port;
    private int PORT;
    private Thread thread;
    BufferedReader input;
    PrintWriter output;

    public ClientGUI() {
        frame = new JFrame("De La Salle Usap");
        panel = new JPanel();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // construct components
        client_logout_button = new JButton("Logout");

        client_active = new JTextPane();
        client_active.setEditable(false);
        client_active.setVisible(true);

        client_active_label = new JLabel("Active Users:");

        client_chatlog = new JTextPane();
        client_chatlog.setEditable(false);
        client_chatlog.setVisible(true);

        client_name_field = new JTextField(5);

        client_name_label = new JLabel("Name");

        client_ip_field = new JTextField(5);

        client_ip_label = new JLabel("IP Address");

        client_port_field = new JTextField(5);

        client_port_label = new JLabel("Port Number");

        client_proceed_button = new JButton("Proceed");

        client_file_button = new JButton("Send File");
        client_message_button = new JButton("Send Message");

        client_message_field = new JTextArea(5, 5);
        client_message_field.setLineWrap(true);
        client_message_field.setEditable(true);
        client_message_field.setVisible(true);

        client_chatlog.setContentType("text/html");
        client_chatlog.putClientProperty(JEditorPane.HONOR_DISPLAY_PROPERTIES, true);

        appendPane(client_chatlog, "<br><br>" + "<h3>Welcome to De La Salle Usap!</h3>" + "<br>"
                + "Enter your name, IP Address, and Port Number" + "<br>" + "to get started!");

        // adjust size and set layout
        panel.setPreferredSize(new Dimension(601, 350));
        panel.setLayout(null);

        // adjust vertical scrollbar
        vertical_log = new JScrollPane(client_chatlog);
        vertical_log.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        vertical_user = new JScrollPane(client_active);
        vertical_user.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        vertical_message = new JScrollPane(client_message_field);
        vertical_message.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

        // add components
        panel.add(client_logout_button);
        panel.add(vertical_user);
        panel.add(client_active_label);
        panel.add(vertical_log);
        panel.add(client_name_field);
        panel.add(client_name_label);
        panel.add(client_ip_field);
        panel.add(client_ip_label);
        panel.add(client_port_field);
        panel.add(client_port_label);
        panel.add(client_proceed_button);

        panel.add(client_file_button);
        panel.add(client_message_button);
        panel.add(vertical_message);

        // set component bounds (only needed by Absolute Positioning)
        client_logout_button.setBounds(480, 20, 100, 25);
        vertical_user.setBounds(410, 80, 165, 180);
        client_active_label.setBounds(410, 55, 100, 25);
        vertical_log.setBounds(25, 60, 375, 200);
        client_name_field.setBounds(20, 295, 125, 25);
        client_name_label.setBounds(25, 275, 100, 25);
        client_ip_field.setBounds(155, 295, 125, 25);
        client_ip_label.setBounds(160, 275, 100, 25);
        client_port_field.setBounds(290, 295, 125, 25);
        client_port_label.setBounds(295, 275, 100, 25);
        client_proceed_button.setBounds(480, 295, 100, 25);

        client_file_button.setBounds(364, 318, 100, 25);
        client_message_button.setBounds(457, 318, 125, 25);
        vertical_message.setBounds(25, 263, 550, 51);

        client_logout_button.setVisible(false);
        client_file_button.setVisible(false);
        client_message_button.setVisible(false);
        vertical_message.setVisible(false);

        frame.getContentPane().add(panel);
        frame.pack();
        frame.setResizable(false);
        frame.setVisible(true);

        // On connect
        client_proceed_button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                try {
                    username = client_name_field.getText();
                    // String port = jtfport.getText();
                    port = client_port_field.getText();
                    server = client_ip_field.getText();
                    // PORT = Integer.parseInt(port);

                    // appendPane(client_chatlog,
                    // "<span>Successfully connected to " + server.getRemoteSocketAddress() +
                    // "</span>");
                    appendPane(client_chatlog, "<br><span>You may start chatting now!</span><br><br>");

                    // input = new BufferedReader(new InputStreamReader(server.getInputStream()));
                    // output = new PrintWriter(server.getOutputStream(), true);

                    // send nickname to server
                    output.println(username);

                    // create new Read Thread
                    // thread = new Read();
                    // thread.start();
                    client_logout_button.setVisible(true);
                    panel.remove(client_name_field);
                    panel.remove(client_port_field);
                    panel.remove(client_ip_field);
                    panel.remove(client_name_label);
                    panel.remove(client_port_label);
                    panel.remove(client_ip_label);
                    panel.remove(client_proceed_button);

                    client_logout_button.setVisible(true);
                    client_file_button.setVisible(true);
                    client_message_button.setVisible(true);
                    vertical_message.setVisible(true);
                    panel.add(client_logout_button);
                    panel.add(client_file_button);
                    panel.add(client_message_button);
                    panel.add(vertical_message);

                    panel.revalidate();
                    panel.repaint();

                } catch (Exception e) {
                    appendPane(client_chatlog, "<span>Could not connect to Server</span>");
                    JOptionPane.showMessageDialog(panel, e.getMessage());
                }
            }

        });
    }

    private void appendPane(JTextPane pane, String message) {
        HTMLDocument doc = (HTMLDocument) pane.getDocument();
        HTMLEditorKit editorKit = (HTMLEditorKit) pane.getEditorKit();
        try {
            editorKit.insertHTML(doc, doc.getLength(), message, 0, 0, null);
            pane.setCaretPosition(doc.getLength());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) throws Exception {
        ClientGUI client = new ClientGUI();
    }
}
